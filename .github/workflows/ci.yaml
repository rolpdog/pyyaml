---
name: PyYAML CI

on:
  push:
  pull_request:
    types: [opened, synchronize, edited, reopened]
  workflow_dispatch:
    inputs:
      run_self_hosted:
        description: Run self-hosted jobs ("yes" to run self-hosted)
        required: true
        default: 'yes'

env:
  LIBYAML_REPO: https://github.com/yaml/libyaml
  LIBYAML_REF: 0.2.5

jobs:
#  python_sdist:
#    name: PyYAML sdist
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout pyyaml
#      uses: actions/checkout@v2
#
#    - name: Install a python
#      uses: actions/setup-python@v2
#      with:
#        python-version: 3.x
#
#    - name: Install build deps
#      run: |
#        python -V
#        python -m pip install build
#
#    - name: Build sdist
#      run: |
#        # We DO want to force Cythoning, at least until 6.0.
#        export PYYAML_FORCE_CYTHON=1
#        # We don't actually want to build the lib.
#        export PYYAML_FORCE_LIBYAML=0
#
#        python -m build .
#
#        # Ensure exactly one artifact was produced.
#        [[ $(shopt -s nullglob; ls dist/*.tar.gz | wc -w) == 1 ]] || {
#          echo "Unexpected content in dist dir: '$(ls dist/*.tar.gz)'."
#          exit 1
#        }
#
#    - name: Test sdist
#      run: |
#        # Install some libyaml headers.
#        # TODO Should we smoke test the sdist against the libyaml we built?
#        sudo apt update
#        sudo apt install libyaml-dev -y
#
#        # Ensure Cython is not present so we use only what's in the sdist.
#        python -m pip uninstall Cython -y || true
#
#        # Pass no extra args.
#        # We should auto-install with libyaml since it's present.
#        python -m pip install dist/*.tar.gz -v
#
#        python packaging/build/smoketest.py
#
#    - name: Upload sdist artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: dist
#        path: dist/*.tar.gz
#
#
#  linux_libyaml:
#    name: libyaml ${{matrix.cfg.arch}} ${{matrix.cfg.platform}}
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        cfg:
#        - { platform: manylinux1, arch: x86_64 }
#        - { platform: manylinux2014, arch: aarch64 }
#        - { platform: manylinux2014, arch: s390x }
#    env:
#      DOCKER_IMAGE: quay.io/pypa/${{matrix.cfg.platform}}_${{matrix.cfg.arch}}
#    steps:
#    - name: Check cached libyaml state
#      id: cached_libyaml
#      uses: actions/cache@v2
#      with:
#        path: libyaml
#        key: libyamlX_${{matrix.cfg.platform}}_${{matrix.cfg.arch}}_${{env.LIBYAML_REF}}
#
#    - name: configure docker foreign arch support
#      uses: docker/setup-qemu-action@v1
#      if: matrix.cfg.arch != 'x86_64' && steps.cached_libyaml.outputs.cache-hit != 'true'
#
#    - name: Checkout pyyaml
#      uses: actions/checkout@v2
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#    - name: Build libyaml
#      run: >
#        docker run --rm
#        --volume "$(pwd):/io"
#        --env LIBYAML_REF
#        --env LIBYAML_REPO
#        --workdir /io
#        "$DOCKER_IMAGE"
#        /io/packaging/build/libyaml.sh
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#    - name: ensure output is world readable (or cache fill fails with Permission Denied)
#      run: >
#        sudo chmod -R a+r ./libyaml/
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#
#  linux_pyyaml:
#    needs: linux_libyaml
#    name: pyyaml ${{matrix.cfg.arch}} ${{matrix.cfg.platform}} ${{matrix.cfg.python_tag}}
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        cfg:
#        - { platform: manylinux1, arch: x86_64, python_tag: cp36-cp36m }
#        - { platform: manylinux1, arch: x86_64, python_tag: cp37-cp37m }
#        - { platform: manylinux1, arch: x86_64, python_tag: cp38-cp38 }
#        - { platform: manylinux1, arch: x86_64, python_tag: cp39-cp39 }
#        - { platform: manylinux2014, arch: aarch64, python_tag: cp36-cp36m }
#        - { platform: manylinux2014, arch: aarch64, python_tag: cp37-cp37m }
#        - { platform: manylinux2014, arch: aarch64, python_tag: cp38-cp38 }
#        - { platform: manylinux2014, arch: aarch64, python_tag: cp39-cp39 }
#        - { platform: manylinux2014, arch: s390x, python_tag: cp36-cp36m }
#        - { platform: manylinux2014, arch: s390x, python_tag: cp37-cp37m }
#        - { platform: manylinux2014, arch: s390x, python_tag: cp38-cp38 }
#        - { platform: manylinux2014, arch: s390x, python_tag: cp39-cp39 }
#    env:
#      AW_PLAT: ${{matrix.cfg.platform}}_${{matrix.cfg.arch}}
#      DOCKER_IMAGE: quay.io/pypa/${{matrix.cfg.platform}}_${{matrix.cfg.arch}}
#      PYTHON_TAG: ${{matrix.cfg.python_tag}}
#      PYYAML_BUILD_WHEELS: 1
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Fetch cached libyaml
#      id: cached_libyaml
#      uses: actions/cache@v2
#      with:
#        path: libyaml
#        key: libyamlX_${{matrix.cfg.platform}}_${{matrix.cfg.arch}}_${{env.LIBYAML_REF}}
#
#    - name: Ensure libyaml fetched
#      run: exit 1
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#    - name: configure docker foreign arch support
#      uses: docker/setup-qemu-action@v1
#      if: matrix.cfg.arch != 'x86_64'
#
#    - name: Start container
#      run: >
#        docker run --rm --tty --detach
#        --name worker
#        --volume "$(pwd):/io"
#        "$DOCKER_IMAGE"
#        bash
#
#    - name: Build/Test/Package
#      run: >
#        docker exec
#        --env PYTHON_TAG
#        --env PYYAML_RUN_TESTS
#        --env PYYAML_BUILD_WHEELS
#        --env AW_PLAT
#        --workdir /io worker
#        /io/packaging/build/manylinux.sh
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: dist
#        path: dist/*.whl

  macos_libyaml:
    name: libyaml ${{matrix.arch}} ${{matrix.platform}}
    runs-on: ${{matrix.platform}}
    strategy:
      matrix:
        include:
        - spec: x86_64
        - spec: arm64
          runs_on: [self-hosted, macOS, arm64]
    if: ${{ (github.event.inputs.run_self_hosted || 'no') == 'yes' }}
    #if: ${{ !(contains(matrix.runs_on || '', 'self-hosted')) || (github.event.inputs.run_self_hosted || 'no') == 'yes' }}

    steps:
    - name: do a thing
      run: |
        sw_vers
        arch
#    - name: Check cached libyaml state
#      id: cached_libyaml
#      uses: actions/cache@v2
#      with:
#        path: libyaml
#        key: libyaml_${{matrix.platform}}_${{matrix.arch}}_${{env.LIBYAML_REF}}
#
#    - name: Checkout pyyaml
#      uses: actions/checkout@v2
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#    - name: Build libyaml
#      env:
#        MACOSX_DEPLOYMENT_TARGET: '10.9'
#      run: |
#        brew install automake coreutils
#        bash ./packaging/build/libyaml.sh
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#  macos_pyyaml:
#    needs: macos_libyaml
#    name: pyyaml ${{ matrix.spec }}
#    runs-on: ${{ matrix.runs_on || 'macos-10.15' }}
#    strategy:
#      matrix:
#        include:
#        - spec: cp36-macosx_x86_64
#        - spec: cp37-macosx_x86_64
#        - spec: cp38-macosx_x86_64
#        - spec: cp39-macosx_x86_64
#        - spec: cp310-macosx_x86_64
#
#        # build for arm64 under a hacked macOS 12 self-hosted x86_64-on-arm64 runner until arm64 is fully supported
#        # FIXME: ? cp38-macosx_arm64 requires special handling and fails some test_zdist tests under cibw 2.1.2, skip it (so Apple's XCode python3 won't have a wheel)
#        - spec: cp39-macosx_arm64
#          deployment_target: '11.0'
#          runs_on: [self-hosted, macOS, arm64]
#          run_wrapper: arch -arm64 bash --noprofile --norc -eo pipefail {0}
#          sdkroot: macosx11.3
#
#        - spec: cp310-macosx_arm64
#          deployment_target: '11.0'
#          runs_on: [self-hosted, macOS, arm64]
#          run_wrapper: arch -arm64 bash --noprofile --norc -eo pipefail {0}
#          sdkroot: macosx11.3
#
#    steps:
#    - name: Checkout pyyaml
#      uses: actions/checkout@v2
#
#    - name: Get cached libyaml state
#      id: cached_libyaml
#      uses: actions/cache@v2
#      with:
#        path: libyaml
#        key: libyaml_${{matrix.platform}}_${{matrix.arch}}_${{env.LIBYAML_REF}}
#
#    - name: Ensure libyaml fetched
#      run: exit 1
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#    - name: Install a python
#      uses: actions/setup-python@v2
#      with:
#        python-version: 3.x
#
#    - name: Build/Test/Package
#      env:
#        CIBW_BUILD: ${{matrix.python_tag}}
#        CIBW_BUILD_VERBOSITY: 1
#      run: bash ./packaging/build/macos.sh
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: dist
#        path: dist/*.whl
#
#  windows_libyaml:
#    name: libyaml ${{matrix.platform}} ${{matrix.arch}}
#    runs-on: ${{matrix.platform}}
#    strategy:
#      matrix:
#        include:
#        - platform: windows-2016
#          arch: x64
#        - platform: windows-2016
#          arch: win32
#    steps:
#    - name: Get cached libyaml state
#      id: cached_libyaml
#      uses: actions/cache@v2
#      with:
#        path: libyaml
#        key: libyaml_${{matrix.platform}}_${{matrix.arch}}_${{env.LIBYAML_REF}}
#
#    - name: build libyaml
#      shell: bash
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#      run: |
#        # git spews all over stderr unless we tell it not to
#        export GIT_REDIRECT_STDERR="2>&1"
#
#        if [[ ! -d ./libyaml ]]; then
#          git clone -b ${{ env.LIBYAML_REF }} ${{ env.LIBYAML_REPO }} 2>&1
#        fi
#
#        pushd libyaml
#        git clean -fdx
#        popd
#
#        mkdir libyaml/build
#
#        pushd libyaml/build
#        cmake.exe -G "Visual Studio 15 2017" -A ${{ matrix.arch }} -DYAML_STATIC_LIB_NAME=yaml ..
#        cmake.exe --build . --config Release
#        popd
#
#
#  windows_pyyaml:
#    needs: windows_libyaml
#    name: pyyaml ${{ matrix.platform }} ${{matrix.python_arch}} ${{matrix.spec}}
#    runs-on: ${{matrix.platform}}
#    strategy:
#      matrix:
#        include:
#        - platform: windows-2016
#          build_arch: x64
#          python_arch: x64
#          spec: 3.6
#        - platform: windows-2016
#          build_arch: x64
#          python_arch: x64
#          spec: 3.7
#        - platform: windows-2016
#          build_arch: x64
#          python_arch: x64
#          spec: 3.8
#        - platform: windows-2016
#          build_arch: x64
#          python_arch: x64
#          spec: 3.9
#        - platform: windows-2016
#          build_arch: x64
#          python_arch: x64
#          spec: 3.10.0-rc.2
#        - platform: windows-2016
#          build_arch: win32
#          python_arch: x86
#          spec: 3.6
#        - platform: windows-2016
#          build_arch: win32
#          python_arch: x86
#          spec: 3.7
#        - platform: windows-2016
#          build_arch: win32
#          python_arch: x86
#          spec: 3.8
#        - platform: windows-2016
#          build_arch: win32
#          python_arch: x86
#          spec: 3.9
#        - platform: windows-2016
#          build_arch: win32
#          python_arch: x86
#          spec: 3.10.0-rc.2
#    steps:
#    # autocrlf screws up tests under Windows
#    - name: Set git to use LF
#      run: |
#        git config --global core.autocrlf false
#        git config --global core.eol lf
#
#    - name: Checkout pyyaml
#      uses: actions/checkout@v2
#
#    - name: Get cached libyaml state
#      id: cached_libyaml
#      uses: actions/cache@v2
#      with:
#        path: libyaml
#        key: libyaml_${{matrix.platform}}_${{matrix.build_arch}}_${{env.LIBYAML_REF}}
#
#    - name: Ensure libyaml fetched
#      run: exit 1
#      if: steps.cached_libyaml.outputs.cache-hit != 'true'
#
#    - name: Install python ${{ matrix.spec }}
#      uses: actions/setup-python@v2
#      with:
#        architecture: ${{ matrix.python_arch }}
#        python-version: ${{ matrix.spec }}
#
#    - name: Build/Test/Package
#      env:
#        PYYAML_FORCE_CYTHON: 1
#        PYYAML_FORCE_LIBYAML: 1
#        INCLUDE: libyaml/include
#        LIBPATH: libyaml/build/Release
#      shell: bash
#      run: |
#        set -eux
#        python -V
#        python -m pip install Cython wheel
#
#        # python setup.py --with-libyaml build_ext -D YAML_DECLARE_STATIC build bdist_wheel
#
#        # run tests on built wheel
#        python -m pip install dist/*.whl
#        python tests/lib/test_all.py
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: dist
#        path: dist/*.whl
#        if-no-files-found: error
...
